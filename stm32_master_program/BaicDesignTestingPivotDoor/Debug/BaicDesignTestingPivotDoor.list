
BaicDesignTestingPivotDoor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002454  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002580  08002580  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002580  08002580  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002580  08002580  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002580  08002580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002594  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002594  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bf9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014cf  00000000  00000000  00027c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00029100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  00029aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016662  00000000  00000000  0002a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000968f  00000000  00000000  000409fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842a3  00000000  00000000  0004a089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce32c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a8  00000000  00000000  000ce37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002548 	.word	0x08002548

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002548 	.word	0x08002548

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fdbf 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f837 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8e7 	bl	800032c <MX_GPIO_Init>
  MX_TIM2_Init();
 800015e:	f000 f86f 	bl	8000240 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	initial_system_state();
 8000162:	f000 fa7b 	bl	800065c <initial_system_state>
  	/* USER CODE END 2 */

  	/* Infinite loop */
  	/* USER CODE BEGIN WHILE */
  	while (1) {
  		if (HAL_GPIO_ReadPin(door_sensor_GPIO_Port, door_sensor_Pin)) {
 8000166:	f44f 7100 	mov.w	r1, #512	; 0x200
 800016a:	4816      	ldr	r0, [pc, #88]	; (80001c4 <main+0x78>)
 800016c:	f001 f8a0 	bl	80012b0 <HAL_GPIO_ReadPin>
 8000170:	4603      	mov	r3, r0
 8000172:	2b00      	cmp	r3, #0
 8000174:	d001      	beq.n	800017a <main+0x2e>
  			remained_open();
 8000176:	f000 fc17 	bl	80009a8 <remained_open>
  		}
  		/* USER CODE END WHILE */

  		/* USER CODE BEGIN 3 */
  		uint8_t select_switch = select_system(); // Selection between motion sensor and wind sensor
 800017a:	f000 faa3 	bl	80006c4 <select_system>
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]

  		switch (select_switch) {
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d002      	beq.n	800018e <main+0x42>
 8000188:	2b02      	cmp	r3, #2
 800018a:	d004      	beq.n	8000196 <main+0x4a>
 800018c:	e019      	b.n	80001c2 <main+0x76>
  		case 1:

  			normal_state(0);
 800018e:	2000      	movs	r0, #0
 8000190:	f000 fab2 	bl	80006f8 <normal_state>
  			break;
 8000194:	e015      	b.n	80001c2 <main+0x76>

  		case 2:
  			if (wind_sensor_state()) {
 8000196:	f000 fa51 	bl	800063c <wind_sensor_state>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d00c      	beq.n	80001ba <main+0x6e>
  				if (!manager_auth()) {
 80001a0:	f000 fc5e 	bl	8000a60 <manager_auth>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d107      	bne.n	80001ba <main+0x6e>
  					emergency_close();
 80001aa:	f000 fbbf 	bl	800092c <emergency_close>
  					while (!manager_auth())
 80001ae:	bf00      	nop
 80001b0:	f000 fc56 	bl	8000a60 <manager_auth>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d0fa      	beq.n	80001b0 <main+0x64>
  						;
  				}
  			}
  			normal_state(1);
 80001ba:	2001      	movs	r0, #1
 80001bc:	f000 fa9c 	bl	80006f8 <normal_state>

  			break;
 80001c0:	bf00      	nop
  	while (1) {
 80001c2:	e7d0      	b.n	8000166 <main+0x1a>
 80001c4:	40010800 	.word	0x40010800

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 f9ae 	bl	8002538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f2:	2310      	movs	r3, #16
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f6:	2300      	movs	r3, #0
 80001f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 f886 	bl	8001310 <HAL_RCC_OscConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800020a:	f000 fc8b 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020e:	230f      	movs	r3, #15
 8000210:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2100      	movs	r1, #0
 8000228:	4618      	mov	r0, r3
 800022a:	f001 faf3 	bl	8001814 <HAL_RCC_ClockConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000234:	f000 fc76 	bl	8000b24 <Error_Handler>
  }
}
 8000238:	bf00      	nop
 800023a:	3740      	adds	r7, #64	; 0x40
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b08e      	sub	sp, #56	; 0x38
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000254:	f107 0320 	add.w	r3, r7, #32
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
 800026c:	615a      	str	r2, [r3, #20]
 800026e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000270:	4b2d      	ldr	r3, [pc, #180]	; (8000328 <MX_TIM2_Init+0xe8>)
 8000272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000276:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000278:	4b2b      	ldr	r3, [pc, #172]	; (8000328 <MX_TIM2_Init+0xe8>)
 800027a:	2200      	movs	r2, #0
 800027c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800027e:	4b2a      	ldr	r3, [pc, #168]	; (8000328 <MX_TIM2_Init+0xe8>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63000;
 8000284:	4b28      	ldr	r3, [pc, #160]	; (8000328 <MX_TIM2_Init+0xe8>)
 8000286:	f24f 6218 	movw	r2, #63000	; 0xf618
 800028a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800028c:	4b26      	ldr	r3, [pc, #152]	; (8000328 <MX_TIM2_Init+0xe8>)
 800028e:	2200      	movs	r2, #0
 8000290:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000292:	4b25      	ldr	r3, [pc, #148]	; (8000328 <MX_TIM2_Init+0xe8>)
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000298:	4823      	ldr	r0, [pc, #140]	; (8000328 <MX_TIM2_Init+0xe8>)
 800029a:	f001 fc21 	bl	8001ae0 <HAL_TIM_Base_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80002a4:	f000 fc3e 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b2:	4619      	mov	r1, r3
 80002b4:	481c      	ldr	r0, [pc, #112]	; (8000328 <MX_TIM2_Init+0xe8>)
 80002b6:	f001 fd79 	bl	8001dac <HAL_TIM_ConfigClockSource>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80002c0:	f000 fc30 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002c4:	4818      	ldr	r0, [pc, #96]	; (8000328 <MX_TIM2_Init+0xe8>)
 80002c6:	f001 fc5a 	bl	8001b7e <HAL_TIM_PWM_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80002d0:	f000 fc28 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d8:	2300      	movs	r3, #0
 80002da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002dc:	f107 0320 	add.w	r3, r7, #32
 80002e0:	4619      	mov	r1, r3
 80002e2:	4811      	ldr	r0, [pc, #68]	; (8000328 <MX_TIM2_Init+0xe8>)
 80002e4:	f002 f8a6 	bl	8002434 <HAL_TIMEx_MasterConfigSynchronization>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80002ee:	f000 fc19 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002f2:	2360      	movs	r3, #96	; 0x60
 80002f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2204      	movs	r2, #4
 8000306:	4619      	mov	r1, r3
 8000308:	4807      	ldr	r0, [pc, #28]	; (8000328 <MX_TIM2_Init+0xe8>)
 800030a:	f001 fc91 	bl	8001c30 <HAL_TIM_PWM_ConfigChannel>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000314:	f000 fc06 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000318:	4803      	ldr	r0, [pc, #12]	; (8000328 <MX_TIM2_Init+0xe8>)
 800031a:	f000 fc57 	bl	8000bcc <HAL_TIM_MspPostInit>

}
 800031e:	bf00      	nop
 8000320:	3738      	adds	r7, #56	; 0x38
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000028 	.word	0x20000028

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000340:	4b59      	ldr	r3, [pc, #356]	; (80004a8 <MX_GPIO_Init+0x17c>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a58      	ldr	r2, [pc, #352]	; (80004a8 <MX_GPIO_Init+0x17c>)
 8000346:	f043 0320 	orr.w	r3, r3, #32
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b56      	ldr	r3, [pc, #344]	; (80004a8 <MX_GPIO_Init+0x17c>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0320 	and.w	r3, r3, #32
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b53      	ldr	r3, [pc, #332]	; (80004a8 <MX_GPIO_Init+0x17c>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a52      	ldr	r2, [pc, #328]	; (80004a8 <MX_GPIO_Init+0x17c>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b50      	ldr	r3, [pc, #320]	; (80004a8 <MX_GPIO_Init+0x17c>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	4b4d      	ldr	r3, [pc, #308]	; (80004a8 <MX_GPIO_Init+0x17c>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a4c      	ldr	r2, [pc, #304]	; (80004a8 <MX_GPIO_Init+0x17c>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b4a      	ldr	r3, [pc, #296]	; (80004a8 <MX_GPIO_Init+0x17c>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0308 	and.w	r3, r3, #8
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BC_Pin|buzzer_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2105      	movs	r1, #5
 800038c:	4847      	ldr	r0, [pc, #284]	; (80004ac <MX_GPIO_Init+0x180>)
 800038e:	f000 ffa6 	bl	80012de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|act_clock_Pin|act_aclock_Pin|LS1_Pin
 8000392:	2200      	movs	r2, #0
 8000394:	f240 11eb 	movw	r1, #491	; 0x1eb
 8000398:	4845      	ldr	r0, [pc, #276]	; (80004b0 <MX_GPIO_Init+0x184>)
 800039a:	f000 ffa0 	bl	80012de <HAL_GPIO_WritePin>
                          |LS2_Pin|FR_Pin|alignment_sensor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80003a4:	4841      	ldr	r0, [pc, #260]	; (80004ac <MX_GPIO_Init+0x180>)
 80003a6:	f000 ff9a 	bl	80012de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BC_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = BC_Pin|buzzer_Pin;
 80003aa:	2305      	movs	r3, #5
 80003ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	2302      	movs	r3, #2
 80003b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	4619      	mov	r1, r3
 80003c0:	483a      	ldr	r0, [pc, #232]	; (80004ac <MX_GPIO_Init+0x180>)
 80003c2:	f000 fdf1 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 act_clock_Pin act_aclock_Pin LS1_Pin
                           LS2_Pin FR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|act_clock_Pin|act_aclock_Pin|LS1_Pin
 80003c6:	23eb      	movs	r3, #235	; 0xeb
 80003c8:	613b      	str	r3, [r7, #16]
                          |LS2_Pin|FR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	4834      	ldr	r0, [pc, #208]	; (80004b0 <MX_GPIO_Init+0x184>)
 80003de:	f000 fde3 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : motion_in_Pin button_motion_in_Pin button_motion_out_Pin motion_out_Pin */
  GPIO_InitStruct.Pin = motion_in_Pin|button_motion_in_Pin|button_motion_out_Pin|motion_out_Pin;
 80003e2:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003ec:	2302      	movs	r3, #2
 80003ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	482e      	ldr	r0, [pc, #184]	; (80004b0 <MX_GPIO_Init+0x184>)
 80003f8:	f000 fdd6 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : actuator_sensor_Pin */
  GPIO_InitStruct.Pin = actuator_sensor_Pin;
 80003fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000406:	2301      	movs	r3, #1
 8000408:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(actuator_sensor_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4827      	ldr	r0, [pc, #156]	; (80004b0 <MX_GPIO_Init+0x184>)
 8000412:	f000 fdc9 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : wind_Pin */
  GPIO_InitStruct.Pin = wind_Pin;
 8000416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800041a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(wind_GPIO_Port, &GPIO_InitStruct);
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	4619      	mov	r1, r3
 800042a:	4821      	ldr	r0, [pc, #132]	; (80004b0 <MX_GPIO_Init+0x184>)
 800042c:	f000 fdbc 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : function_switch_Pin door_sensor_Pin */
  GPIO_InitStruct.Pin = function_switch_Pin|door_sensor_Pin;
 8000430:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	4819      	ldr	r0, [pc, #100]	; (80004ac <MX_GPIO_Init+0x180>)
 8000446:	f000 fdaf 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : master_button_Pin */
  GPIO_InitStruct.Pin = master_button_Pin;
 800044a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000454:	2302      	movs	r3, #2
 8000456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(master_button_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4813      	ldr	r0, [pc, #76]	; (80004ac <MX_GPIO_Init+0x180>)
 8000460:	f000 fda2 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led3_Pin led2_Pin led1_Pin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 8000464:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8000468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800046a:	2311      	movs	r3, #17
 800046c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800046e:	2301      	movs	r3, #1
 8000470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2302      	movs	r3, #2
 8000474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	480b      	ldr	r0, [pc, #44]	; (80004ac <MX_GPIO_Init+0x180>)
 800047e:	f000 fd93 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : alignment_sensor_Pin */
  GPIO_InitStruct.Pin = alignment_sensor_Pin;
 8000482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048c:	2301      	movs	r3, #1
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2302      	movs	r3, #2
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(alignment_sensor_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_GPIO_Init+0x184>)
 800049c:	f000 fd84 	bl	8000fa8 <HAL_GPIO_Init>

}
 80004a0:	bf00      	nop
 80004a2:	3720      	adds	r7, #32
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <person_present>:

/* USER CODE BEGIN 4 */

uint8_t person_present(uint8_t side) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]

	HAL_Delay(20);
 80004be:	2014      	movs	r0, #20
 80004c0:	f000 fc6a 	bl	8000d98 <HAL_Delay>
	if (side == 'F')
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b46      	cmp	r3, #70	; 0x46
 80004c8:	d106      	bne.n	80004d8 <person_present+0x24>
		return HAL_GPIO_ReadPin(motion_out_GPIO_Port, motion_out_Pin);
 80004ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ce:	480c      	ldr	r0, [pc, #48]	; (8000500 <person_present+0x4c>)
 80004d0:	f000 feee 	bl	80012b0 <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	e00e      	b.n	80004f6 <person_present+0x42>
	else if (side == 'B')
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2b42      	cmp	r3, #66	; 0x42
 80004dc:	d10b      	bne.n	80004f6 <person_present+0x42>
		return !HAL_GPIO_ReadPin(motion_in_GPIO_Port, motion_in_Pin);
 80004de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e2:	4807      	ldr	r0, [pc, #28]	; (8000500 <person_present+0x4c>)
 80004e4:	f000 fee4 	bl	80012b0 <HAL_GPIO_ReadPin>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	bf0c      	ite	eq
 80004ee:	2301      	moveq	r3, #1
 80004f0:	2300      	movne	r3, #0
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	e7ff      	b.n	80004f6 <person_present+0x42>
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40010c00 	.word	0x40010c00

08000504 <move_actuator>:

void move_actuator(uint8_t state) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	if (state == 'L') {
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b4c      	cmp	r3, #76	; 0x4c
 8000512:	d110      	bne.n	8000536 <move_actuator+0x32>
		HAL_GPIO_WritePin(act_clock_GPIO_Port, act_clock_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2102      	movs	r1, #2
 8000518:	481c      	ldr	r0, [pc, #112]	; (800058c <move_actuator+0x88>)
 800051a:	f000 fee0 	bl	80012de <HAL_GPIO_WritePin>
		HAL_Delay(20);
 800051e:	2014      	movs	r0, #20
 8000520:	f000 fc3a 	bl	8000d98 <HAL_Delay>
		HAL_GPIO_WritePin(act_aclock_GPIO_Port, act_aclock_Pin, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2108      	movs	r1, #8
 8000528:	4818      	ldr	r0, [pc, #96]	; (800058c <move_actuator+0x88>)
 800052a:	f000 fed8 	bl	80012de <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800052e:	2032      	movs	r0, #50	; 0x32
 8000530:	f000 fc32 	bl	8000d98 <HAL_Delay>
		HAL_Delay(20);
		HAL_GPIO_WritePin(act_clock_GPIO_Port, act_clock_Pin, GPIO_PIN_RESET);
		HAL_Delay(50);
	}

}
 8000534:	e026      	b.n	8000584 <move_actuator+0x80>
	} else if (state == 'U') {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b55      	cmp	r3, #85	; 0x55
 800053a:	d110      	bne.n	800055e <move_actuator+0x5a>
		HAL_GPIO_WritePin(act_aclock_GPIO_Port, act_aclock_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2108      	movs	r1, #8
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <move_actuator+0x88>)
 8000542:	f000 fecc 	bl	80012de <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8000546:	2014      	movs	r0, #20
 8000548:	f000 fc26 	bl	8000d98 <HAL_Delay>
		HAL_GPIO_WritePin(act_clock_GPIO_Port, act_clock_Pin, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2102      	movs	r1, #2
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <move_actuator+0x88>)
 8000552:	f000 fec4 	bl	80012de <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000556:	2032      	movs	r0, #50	; 0x32
 8000558:	f000 fc1e 	bl	8000d98 <HAL_Delay>
}
 800055c:	e012      	b.n	8000584 <move_actuator+0x80>
	} else if (state == 'S') {
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b53      	cmp	r3, #83	; 0x53
 8000562:	d10f      	bne.n	8000584 <move_actuator+0x80>
		HAL_GPIO_WritePin(act_aclock_GPIO_Port, act_aclock_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2108      	movs	r1, #8
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <move_actuator+0x88>)
 800056a:	f000 feb8 	bl	80012de <HAL_GPIO_WritePin>
		HAL_Delay(20);
 800056e:	2014      	movs	r0, #20
 8000570:	f000 fc12 	bl	8000d98 <HAL_Delay>
		HAL_GPIO_WritePin(act_clock_GPIO_Port, act_clock_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2102      	movs	r1, #2
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <move_actuator+0x88>)
 800057a:	f000 feb0 	bl	80012de <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800057e:	2032      	movs	r0, #50	; 0x32
 8000580:	f000 fc0a 	bl	8000d98 <HAL_Delay>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40010c00 	.word	0x40010c00

08000590 <actuator_state>:
uint8_t actuator_state(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 8000594:	2014      	movs	r0, #20
 8000596:	f000 fbff 	bl	8000d98 <HAL_Delay>
	return HAL_GPIO_ReadPin(actuator_sensor_GPIO_Port, actuator_sensor_Pin);
 800059a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <actuator_state+0x1c>)
 80005a0:	f000 fe86 	bl	80012b0 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0

}
 80005a6:	4618      	mov	r0, r3
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40010c00 	.word	0x40010c00

080005b0 <door_state>:
uint8_t door_state(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 80005b4:	2014      	movs	r0, #20
 80005b6:	f000 fbef 	bl	8000d98 <HAL_Delay>
	return HAL_GPIO_ReadPin(alignment_sensor_GPIO_Port, alignment_sensor_Pin);
 80005ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005be:	4803      	ldr	r0, [pc, #12]	; (80005cc <door_state+0x1c>)
 80005c0:	f000 fe76 	bl	80012b0 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0

}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <direction>:
void direction(uint8_t dir) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	if (dir == 'C')
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b43      	cmp	r3, #67	; 0x43
 80005de:	d105      	bne.n	80005ec <direction+0x1c>
		HAL_GPIO_WritePin(FR_GPIO_Port, FR_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <direction+0x34>)
 80005e6:	f000 fe7a 	bl	80012de <HAL_GPIO_WritePin>
	else if (dir == 'O')
		HAL_GPIO_WritePin(FR_GPIO_Port, FR_Pin, GPIO_PIN_SET);

}
 80005ea:	e007      	b.n	80005fc <direction+0x2c>
	else if (dir == 'O')
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b4f      	cmp	r3, #79	; 0x4f
 80005f0:	d104      	bne.n	80005fc <direction+0x2c>
		HAL_GPIO_WritePin(FR_GPIO_Port, FR_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <direction+0x34>)
 80005f8:	f000 fe71 	bl	80012de <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010c00 	.word	0x40010c00

08000608 <brake>:

void brake(uint8_t state) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]

	if (state)
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d005      	beq.n	8000624 <brake+0x1c>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	4806      	ldr	r0, [pc, #24]	; (8000638 <brake+0x30>)
 800061e:	f000 fe5e 	bl	80012de <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, GPIO_PIN_RESET);

}
 8000622:	e004      	b.n	800062e <brake+0x26>
		HAL_GPIO_WritePin(BC_GPIO_Port, BC_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2101      	movs	r1, #1
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <brake+0x30>)
 800062a:	f000 fe58 	bl	80012de <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010800 	.word	0x40010800

0800063c <wind_sensor_state>:
uint8_t wind_sensor_state(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

	HAL_Delay(10);
 8000640:	200a      	movs	r0, #10
 8000642:	f000 fba9 	bl	8000d98 <HAL_Delay>
	return HAL_GPIO_ReadPin(wind_GPIO_Port, wind_Pin);
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <wind_sensor_state+0x1c>)
 800064c:	f000 fe30 	bl	80012b0 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0

}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40010c00 	.word	0x40010c00

0800065c <initial_system_state>:

void initial_system_state(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	brake(1);  // Break while door opening
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff ffd1 	bl	8000608 <brake>
	HAL_Delay(50);
 8000666:	2032      	movs	r0, #50	; 0x32
 8000668:	f000 fb96 	bl	8000d98 <HAL_Delay>

	direction('C');
 800066c:	2043      	movs	r0, #67	; 0x43
 800066e:	f7ff ffaf 	bl	80005d0 <direction>
	HAL_Delay(20);
 8000672:	2014      	movs	r0, #20
 8000674:	f000 fb90 	bl	8000d98 <HAL_Delay>
	brake(0);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ffc5 	bl	8000608 <brake>
	HAL_Delay(20);
 800067e:	2014      	movs	r0, #20
 8000680:	f000 fb8a 	bl	8000d98 <HAL_Delay>

	while (!door_state()) {
 8000684:	e002      	b.n	800068c <initial_system_state+0x30>
		HAL_Delay(10);
 8000686:	200a      	movs	r0, #10
 8000688:	f000 fb86 	bl	8000d98 <HAL_Delay>
	while (!door_state()) {
 800068c:	f7ff ff90 	bl	80005b0 <door_state>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f7      	beq.n	8000686 <initial_system_state+0x2a>
	}
	brake(1);
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ffb6 	bl	8000608 <brake>
	HAL_Delay(20);
 800069c:	2014      	movs	r0, #20
 800069e:	f000 fb7b 	bl	8000d98 <HAL_Delay>
	move_actuator('L');
 80006a2:	204c      	movs	r0, #76	; 0x4c
 80006a4:	f7ff ff2e 	bl	8000504 <move_actuator>
	while (!actuator_state()) {
 80006a8:	e002      	b.n	80006b0 <initial_system_state+0x54>
		HAL_Delay(10);
 80006aa:	200a      	movs	r0, #10
 80006ac:	f000 fb74 	bl	8000d98 <HAL_Delay>
	while (!actuator_state()) {
 80006b0:	f7ff ff6e 	bl	8000590 <actuator_state>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0f7      	beq.n	80006aa <initial_system_state+0x4e>
	}
	move_actuator('S');
 80006ba:	2053      	movs	r0, #83	; 0x53
 80006bc:	f7ff ff22 	bl	8000504 <move_actuator>

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <select_system>:

uint8_t select_system(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 80006ca:	200a      	movs	r0, #10
 80006cc:	f000 fb64 	bl	8000d98 <HAL_Delay>
	uint8_t system_state = HAL_GPIO_ReadPin(function_switch_GPIO_Port, function_switch_Pin);
 80006d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <select_system+0x30>)
 80006d6:	f000 fdeb 	bl	80012b0 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]

	if (system_state)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <select_system+0x24>
		return 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	e000      	b.n	80006ea <select_system+0x26>
	else
		return 1;
 80006e8:	2301      	movs	r3, #1

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40010800 	.word	0x40010800

080006f8 <normal_state>:

void normal_state(uint8_t override) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b090      	sub	sp, #64	; 0x40
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	uint32_t rising_flag = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	63fb      	str	r3, [r7, #60]	; 0x3c
	char uart_buf[50];
	int uart_buf_len;
	while (!HAL_GPIO_ReadPin(door_sensor_GPIO_Port, door_sensor_Pin)) {
 8000706:	e0fd      	b.n	8000904 <normal_state+0x20c>

		if (person_present('F') && (!HAL_GPIO_ReadPin(button_motion_out_GPIO_Port, button_motion_out_Pin))) {
 8000708:	2046      	movs	r0, #70	; 0x46
 800070a:	f7ff fed3 	bl	80004b4 <person_present>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	f000 809b 	beq.w	800084c <normal_state+0x154>
 8000716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071a:	4881      	ldr	r0, [pc, #516]	; (8000920 <normal_state+0x228>)
 800071c:	f000 fdc8 	bl	80012b0 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	f040 8092 	bne.w	800084c <normal_state+0x154>
			if (actuator_state()) {
 8000728:	f7ff ff32 	bl	8000590 <actuator_state>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00e      	beq.n	8000750 <normal_state+0x58>
				move_actuator('U');
 8000732:	2055      	movs	r0, #85	; 0x55
 8000734:	f7ff fee6 	bl	8000504 <move_actuator>
				while (actuator_state()) {
 8000738:	e002      	b.n	8000740 <normal_state+0x48>
					HAL_Delay(20);
 800073a:	2014      	movs	r0, #20
 800073c:	f000 fb2c 	bl	8000d98 <HAL_Delay>
				while (actuator_state()) {
 8000740:	f7ff ff26 	bl	8000590 <actuator_state>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f7      	bne.n	800073a <normal_state+0x42>
				}
				move_actuator('S');
 800074a:	2053      	movs	r0, #83	; 0x53
 800074c:	f7ff feda 	bl	8000504 <move_actuator>
			}
			/* direction('O');
			 brake(0);
			 HAL_Delay(17000);
			 brake(1);*/
			move_motor('O', 90);
 8000750:	215a      	movs	r1, #90	; 0x5a
 8000752:	204f      	movs	r0, #79	; 0x4f
 8000754:	f000 f994 	bl	8000a80 <move_motor>
			HAL_Delay(5000);
 8000758:	f241 3088 	movw	r0, #5000	; 0x1388
 800075c:	f000 fb1c 	bl	8000d98 <HAL_Delay>
			direction('C');
 8000760:	2043      	movs	r0, #67	; 0x43
 8000762:	f7ff ff35 	bl	80005d0 <direction>
			brake(0);
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff4e 	bl	8000608 <brake>
			while (!door_state()) {
 800076c:	e04e      	b.n	800080c <normal_state+0x114>
				if (!rising_flag) {
 800076e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10f      	bne.n	8000794 <normal_state+0x9c>

					if (HAL_GPIO_ReadPin(wind_GPIO_Port, wind_Pin)) {
 8000774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000778:	4869      	ldr	r0, [pc, #420]	; (8000920 <normal_state+0x228>)
 800077a:	f000 fd99 	bl	80012b0 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d038      	beq.n	80007f6 <normal_state+0xfe>

						count++;
 8000784:	4b67      	ldr	r3, [pc, #412]	; (8000924 <normal_state+0x22c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a66      	ldr	r2, [pc, #408]	; (8000924 <normal_state+0x22c>)
 800078c:	6013      	str	r3, [r2, #0]
						rising_flag = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000792:	e030      	b.n	80007f6 <normal_state+0xfe>
					}
				} else {
					if (!HAL_GPIO_ReadPin(wind_GPIO_Port, wind_Pin)) {
 8000794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000798:	4861      	ldr	r0, [pc, #388]	; (8000920 <normal_state+0x228>)
 800079a:	f000 fd89 	bl	80012b0 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d128      	bne.n	80007f6 <normal_state+0xfe>

						rising_flag = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c

				}
				//uart_buf_len = sprintf(uart_buf, "%lu count\r\n", count);
				//HAL_UART_Transmit(&huart1, &uart_buf, uart_buf_len + 1, 100);

				while (person_present('B') && (count < 503)) {
 80007a8:	e025      	b.n	80007f6 <normal_state+0xfe>
					direction('O');
 80007aa:	204f      	movs	r0, #79	; 0x4f
 80007ac:	f7ff ff10 	bl	80005d0 <direction>
					brake(0);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff ff29 	bl	8000608 <brake>
					if (!rising_flag) {
 80007b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10f      	bne.n	80007dc <normal_state+0xe4>

						if (HAL_GPIO_ReadPin(wind_GPIO_Port, wind_Pin)) {
 80007bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c0:	4857      	ldr	r0, [pc, #348]	; (8000920 <normal_state+0x228>)
 80007c2:	f000 fd75 	bl	80012b0 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d011      	beq.n	80007f0 <normal_state+0xf8>

							count++;
 80007cc:	4b55      	ldr	r3, [pc, #340]	; (8000924 <normal_state+0x22c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a54      	ldr	r2, [pc, #336]	; (8000924 <normal_state+0x22c>)
 80007d4:	6013      	str	r3, [r2, #0]
							rising_flag = 1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007da:	e009      	b.n	80007f0 <normal_state+0xf8>
						}
					} else {
						if (!HAL_GPIO_ReadPin(wind_GPIO_Port, wind_Pin)) {
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	484f      	ldr	r0, [pc, #316]	; (8000920 <normal_state+0x228>)
 80007e2:	f000 fd65 	bl	80012b0 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d101      	bne.n	80007f0 <normal_state+0xf8>

							rising_flag = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
					//{

					// }
					//HAL_Delay(200);

					HAL_Delay(200);
 80007f0:	20c8      	movs	r0, #200	; 0xc8
 80007f2:	f000 fad1 	bl	8000d98 <HAL_Delay>
				while (person_present('B') && (count < 503)) {
 80007f6:	2042      	movs	r0, #66	; 0x42
 80007f8:	f7ff fe5c 	bl	80004b4 <person_present>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <normal_state+0x114>
 8000802:	4b48      	ldr	r3, [pc, #288]	; (8000924 <normal_state+0x22c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800080a:	d9ce      	bls.n	80007aa <normal_state+0xb2>
			while (!door_state()) {
 800080c:	f7ff fed0 	bl	80005b0 <door_state>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0ab      	beq.n	800076e <normal_state+0x76>
				}

				//direction('C');
			}
			brake(1);
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff fef6 	bl	8000608 <brake>
			if (door_state() && (!override)) {
 800081c:	f7ff fec8 	bl	80005b0 <door_state>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d06e      	beq.n	8000904 <normal_state+0x20c>
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d16b      	bne.n	8000904 <normal_state+0x20c>

				move_actuator('L');
 800082c:	204c      	movs	r0, #76	; 0x4c
 800082e:	f7ff fe69 	bl	8000504 <move_actuator>
				while (!actuator_state()) {
 8000832:	e002      	b.n	800083a <normal_state+0x142>
					HAL_Delay(20);
 8000834:	2014      	movs	r0, #20
 8000836:	f000 faaf 	bl	8000d98 <HAL_Delay>
				while (!actuator_state()) {
 800083a:	f7ff fea9 	bl	8000590 <actuator_state>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d0f7      	beq.n	8000834 <normal_state+0x13c>
				}
				move_actuator('S');
 8000844:	2053      	movs	r0, #83	; 0x53
 8000846:	f7ff fe5d 	bl	8000504 <move_actuator>
			if (door_state() && (!override)) {
 800084a:	e05b      	b.n	8000904 <normal_state+0x20c>

			}
		} else {
			if (HAL_GPIO_ReadPin(button_motion_out_GPIO_Port, button_motion_out_Pin)) {
 800084c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000850:	4833      	ldr	r0, [pc, #204]	; (8000920 <normal_state+0x228>)
 8000852:	f000 fd2d 	bl	80012b0 <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d053      	beq.n	8000904 <normal_state+0x20c>
				if (person_present('B')) {
 800085c:	2042      	movs	r0, #66	; 0x42
 800085e:	f7ff fe29 	bl	80004b4 <person_present>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d04d      	beq.n	8000904 <normal_state+0x20c>
					if (actuator_state()) {
 8000868:	f7ff fe92 	bl	8000590 <actuator_state>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00e      	beq.n	8000890 <normal_state+0x198>
						move_actuator('U');
 8000872:	2055      	movs	r0, #85	; 0x55
 8000874:	f7ff fe46 	bl	8000504 <move_actuator>
						while (actuator_state()) {
 8000878:	e002      	b.n	8000880 <normal_state+0x188>
							HAL_Delay(20);
 800087a:	2014      	movs	r0, #20
 800087c:	f000 fa8c 	bl	8000d98 <HAL_Delay>
						while (actuator_state()) {
 8000880:	f7ff fe86 	bl	8000590 <actuator_state>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1f7      	bne.n	800087a <normal_state+0x182>
						}
						move_actuator('S');
 800088a:	2053      	movs	r0, #83	; 0x53
 800088c:	f7ff fe3a 	bl	8000504 <move_actuator>
					}
					direction('O');
 8000890:	204f      	movs	r0, #79	; 0x4f
 8000892:	f7ff fe9d 	bl	80005d0 <direction>
					brake(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff feb6 	bl	8000608 <brake>
					HAL_Delay(15000);
 800089c:	f643 2098 	movw	r0, #15000	; 0x3a98
 80008a0:	f000 fa7a 	bl	8000d98 <HAL_Delay>
					brake(1);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff feaf 	bl	8000608 <brake>
					HAL_Delay(5000);
 80008aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80008ae:	f000 fa73 	bl	8000d98 <HAL_Delay>
					direction('C');
 80008b2:	2043      	movs	r0, #67	; 0x43
 80008b4:	f7ff fe8c 	bl	80005d0 <direction>
					brake(0);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff fea5 	bl	8000608 <brake>
					while (!door_state()) {
 80008be:	e002      	b.n	80008c6 <normal_state+0x1ce>
						HAL_Delay(50);
 80008c0:	2032      	movs	r0, #50	; 0x32
 80008c2:	f000 fa69 	bl	8000d98 <HAL_Delay>
					while (!door_state()) {
 80008c6:	f7ff fe73 	bl	80005b0 <door_state>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0f7      	beq.n	80008c0 <normal_state+0x1c8>
					}
					brake(1);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff fe99 	bl	8000608 <brake>
					if (door_state() && (!override)) {
 80008d6:	f7ff fe6b 	bl	80005b0 <door_state>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d011      	beq.n	8000904 <normal_state+0x20c>
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10e      	bne.n	8000904 <normal_state+0x20c>

						move_actuator('L');
 80008e6:	204c      	movs	r0, #76	; 0x4c
 80008e8:	f7ff fe0c 	bl	8000504 <move_actuator>
						while (!actuator_state()) {
 80008ec:	e002      	b.n	80008f4 <normal_state+0x1fc>
							HAL_Delay(20);
 80008ee:	2014      	movs	r0, #20
 80008f0:	f000 fa52 	bl	8000d98 <HAL_Delay>
						while (!actuator_state()) {
 80008f4:	f7ff fe4c 	bl	8000590 <actuator_state>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f7      	beq.n	80008ee <normal_state+0x1f6>
						}
						move_actuator('S');
 80008fe:	2053      	movs	r0, #83	; 0x53
 8000900:	f7ff fe00 	bl	8000504 <move_actuator>
	while (!HAL_GPIO_ReadPin(door_sensor_GPIO_Port, door_sensor_Pin)) {
 8000904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <normal_state+0x230>)
 800090a:	f000 fcd1 	bl	80012b0 <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	f43f aef9 	beq.w	8000708 <normal_state+0x10>

			}
		}

	}
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	3740      	adds	r7, #64	; 0x40
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40010c00 	.word	0x40010c00
 8000924:	20000070 	.word	0x20000070
 8000928:	40010800 	.word	0x40010800

0800092c <emergency_close>:
void emergency_close(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	if (!door_state()) {
 8000930:	f7ff fe3e 	bl	80005b0 <door_state>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d134      	bne.n	80009a4 <emergency_close+0x78>

		if (actuator_state()) {
 800093a:	f7ff fe29 	bl	8000590 <actuator_state>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d00e      	beq.n	8000962 <emergency_close+0x36>
			move_actuator('U');
 8000944:	2055      	movs	r0, #85	; 0x55
 8000946:	f7ff fddd 	bl	8000504 <move_actuator>
			while (actuator_state()) {
 800094a:	e002      	b.n	8000952 <emergency_close+0x26>
				HAL_Delay(20);
 800094c:	2014      	movs	r0, #20
 800094e:	f000 fa23 	bl	8000d98 <HAL_Delay>
			while (actuator_state()) {
 8000952:	f7ff fe1d 	bl	8000590 <actuator_state>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1f7      	bne.n	800094c <emergency_close+0x20>
			}
			move_actuator('S');
 800095c:	2053      	movs	r0, #83	; 0x53
 800095e:	f7ff fdd1 	bl	8000504 <move_actuator>

		}
		direction('C');
 8000962:	2043      	movs	r0, #67	; 0x43
 8000964:	f7ff fe34 	bl	80005d0 <direction>
		brake(0);
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff fe4d 	bl	8000608 <brake>
		while (!door_state()) {
 800096e:	e002      	b.n	8000976 <emergency_close+0x4a>
			HAL_Delay(20);
 8000970:	2014      	movs	r0, #20
 8000972:	f000 fa11 	bl	8000d98 <HAL_Delay>
		while (!door_state()) {
 8000976:	f7ff fe1b 	bl	80005b0 <door_state>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d0f7      	beq.n	8000970 <emergency_close+0x44>
		}
		brake(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff fe41 	bl	8000608 <brake>
		move_actuator('L');
 8000986:	204c      	movs	r0, #76	; 0x4c
 8000988:	f7ff fdbc 	bl	8000504 <move_actuator>
		while (!actuator_state()) {
 800098c:	e002      	b.n	8000994 <emergency_close+0x68>
			HAL_Delay(20);
 800098e:	2014      	movs	r0, #20
 8000990:	f000 fa02 	bl	8000d98 <HAL_Delay>
		while (!actuator_state()) {
 8000994:	f7ff fdfc 	bl	8000590 <actuator_state>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f7      	beq.n	800098e <emergency_close+0x62>
		}
		move_actuator('S');
 800099e:	2053      	movs	r0, #83	; 0x53
 80009a0:	f7ff fdb0 	bl	8000504 <move_actuator>

	}

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <remained_open>:
void remained_open(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(door_sensor_GPIO_Port, door_sensor_Pin)) {
 80009ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b0:	482a      	ldr	r0, [pc, #168]	; (8000a5c <remained_open+0xb4>)
 80009b2:	f000 fc7d 	bl	80012b0 <HAL_GPIO_ReadPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d04d      	beq.n	8000a58 <remained_open+0xb0>
		if (actuator_state()) {
 80009bc:	f7ff fde8 	bl	8000590 <actuator_state>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00e      	beq.n	80009e4 <remained_open+0x3c>
			move_actuator('U');
 80009c6:	2055      	movs	r0, #85	; 0x55
 80009c8:	f7ff fd9c 	bl	8000504 <move_actuator>
			while (actuator_state()) {
 80009cc:	e002      	b.n	80009d4 <remained_open+0x2c>
				HAL_Delay(20);
 80009ce:	2014      	movs	r0, #20
 80009d0:	f000 f9e2 	bl	8000d98 <HAL_Delay>
			while (actuator_state()) {
 80009d4:	f7ff fddc 	bl	8000590 <actuator_state>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1f7      	bne.n	80009ce <remained_open+0x26>
			}
			move_actuator('S');
 80009de:	2053      	movs	r0, #83	; 0x53
 80009e0:	f7ff fd90 	bl	8000504 <move_actuator>
		}
		brake(0);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff fe0f 	bl	8000608 <brake>
		direction('O');
 80009ea:	204f      	movs	r0, #79	; 0x4f
 80009ec:	f7ff fdf0 	bl	80005d0 <direction>
		HAL_Delay(17000);
 80009f0:	f244 2068 	movw	r0, #17000	; 0x4268
 80009f4:	f000 f9d0 	bl	8000d98 <HAL_Delay>
		brake(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff fe05 	bl	8000608 <brake>
		while (HAL_GPIO_ReadPin(door_sensor_GPIO_Port, door_sensor_Pin)) {
 80009fe:	e002      	b.n	8000a06 <remained_open+0x5e>
			HAL_Delay(50);
 8000a00:	2032      	movs	r0, #50	; 0x32
 8000a02:	f000 f9c9 	bl	8000d98 <HAL_Delay>
		while (HAL_GPIO_ReadPin(door_sensor_GPIO_Port, door_sensor_Pin)) {
 8000a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <remained_open+0xb4>)
 8000a0c:	f000 fc50 	bl	80012b0 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1f4      	bne.n	8000a00 <remained_open+0x58>
		}
		direction('C');
 8000a16:	2043      	movs	r0, #67	; 0x43
 8000a18:	f7ff fdda 	bl	80005d0 <direction>
		brake(0);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fdf3 	bl	8000608 <brake>
		while (!door_state()) {
 8000a22:	e002      	b.n	8000a2a <remained_open+0x82>
			HAL_Delay(50);
 8000a24:	2032      	movs	r0, #50	; 0x32
 8000a26:	f000 f9b7 	bl	8000d98 <HAL_Delay>
		while (!door_state()) {
 8000a2a:	f7ff fdc1 	bl	80005b0 <door_state>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f7      	beq.n	8000a24 <remained_open+0x7c>
		}
		brake(1);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fde7 	bl	8000608 <brake>
		move_actuator('L');
 8000a3a:	204c      	movs	r0, #76	; 0x4c
 8000a3c:	f7ff fd62 	bl	8000504 <move_actuator>
		while (!actuator_state()) {
 8000a40:	e002      	b.n	8000a48 <remained_open+0xa0>
			HAL_Delay(20);
 8000a42:	2014      	movs	r0, #20
 8000a44:	f000 f9a8 	bl	8000d98 <HAL_Delay>
		while (!actuator_state()) {
 8000a48:	f7ff fda2 	bl	8000590 <actuator_state>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f7      	beq.n	8000a42 <remained_open+0x9a>
		}
		move_actuator('S');
 8000a52:	2053      	movs	r0, #83	; 0x53
 8000a54:	f7ff fd56 	bl	8000504 <move_actuator>
	}
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40010800 	.word	0x40010800

08000a60 <manager_auth>:
uint8_t manager_auth(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

	HAL_Delay(10);
 8000a64:	200a      	movs	r0, #10
 8000a66:	f000 f997 	bl	8000d98 <HAL_Delay>
	return HAL_GPIO_ReadPin(master_button_GPIO_Port, master_button_Pin);
 8000a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <manager_auth+0x1c>)
 8000a70:	f000 fc1e 	bl	80012b0 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010800 	.word	0x40010800

08000a80 <move_motor>:
			countpos = 1;
	}
	return countpos;

}
void move_motor(uint8_t dir, uint8_t degree) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b092      	sub	sp, #72	; 0x48
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	71bb      	strb	r3, [r7, #6]
	char uart_buf[50];
	int uart_buf_len;
	uint32_t rising_flag = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	647b      	str	r3, [r7, #68]	; 0x44
	//uint32_t count= 0;
	uint32_t pulses = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	643b      	str	r3, [r7, #64]	; 0x40
	pulses = (degree * TOTAL_PULSES) / 360;
 8000a98:	79ba      	ldrb	r2, [r7, #6]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	015b      	lsls	r3, r3, #5
 8000a9e:	1a9b      	subs	r3, r3, r2
 8000aa0:	019a      	lsls	r2, r3, #6
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <move_motor+0x98>)
 8000aa6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aaa:	441a      	add	r2, r3
 8000aac:	1212      	asrs	r2, r2, #8
 8000aae:	17db      	asrs	r3, r3, #31
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	643b      	str	r3, [r7, #64]	; 0x40
	direction(dir);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fd8a 	bl	80005d0 <direction>
	brake(0);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fda3 	bl	8000608 <brake>

	while (count < pulses) {
 8000ac2:	e01c      	b.n	8000afe <move_motor+0x7e>
		if (!rising_flag) {
 8000ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10f      	bne.n	8000aea <move_motor+0x6a>

			if (HAL_GPIO_ReadPin(wind_GPIO_Port, wind_Pin)) {
 8000aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ace:	4813      	ldr	r0, [pc, #76]	; (8000b1c <move_motor+0x9c>)
 8000ad0:	f000 fbee 	bl	80012b0 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d011      	beq.n	8000afe <move_motor+0x7e>

				count++;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <move_motor+0xa0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <move_motor+0xa0>)
 8000ae2:	6013      	str	r3, [r2, #0]
				rising_flag = 1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8000ae8:	e009      	b.n	8000afe <move_motor+0x7e>
			}
		} else {
			if (!HAL_GPIO_ReadPin(wind_GPIO_Port, wind_Pin)) {
 8000aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aee:	480b      	ldr	r0, [pc, #44]	; (8000b1c <move_motor+0x9c>)
 8000af0:	f000 fbde 	bl	80012b0 <HAL_GPIO_ReadPin>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <move_motor+0x7e>

				rising_flag = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	647b      	str	r3, [r7, #68]	; 0x44
	while (count < pulses) {
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <move_motor+0xa0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8dd      	bhi.n	8000ac4 <move_motor+0x44>
		//uart_buf_len = sprintf(uart_buf, "%lu count\r\n", count);
		//HAL_UART_Transmit(&huart1, &uart_buf, uart_buf_len + 1, 100);

	}

	brake(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fd7d 	bl	8000608 <brake>
}
 8000b0e:	bf00      	nop
 8000b10:	3748      	adds	r7, #72	; 0x48
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	b60b60b7 	.word	0xb60b60b7
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	20000070 	.word	0x20000070

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_MspInit+0x60>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_MspInit+0x60>)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba4:	d10b      	bne.n	8000bbe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_TIM_Base_MspInit+0x34>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_TIM_Base_MspInit+0x34>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	61d3      	str	r3, [r2, #28]
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_TIM_Base_MspInit+0x34>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bea:	d117      	bne.n	8000c1c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_TIM_MspPostInit+0x58>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <HAL_TIM_MspPostInit+0x58>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_TIM_MspPostInit+0x58>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c04:	2302      	movs	r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	4804      	ldr	r0, [pc, #16]	; (8000c28 <HAL_TIM_MspPostInit+0x5c>)
 8000c18:	f000 f9c6 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c1c:	bf00      	nop
 8000c1e:	3720      	adds	r7, #32
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010800 	.word	0x40010800

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c72:	f000 f875 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
	...

08000c88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	; (8000cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	; (8000ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cae:	f7ff ffe4 	bl	8000c7a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f001 fc1d 	bl	80024f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb6:	f7ff fa49 	bl	800014c <main>
  bx lr
 8000cba:	4770      	bx	lr
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc4:	08002588 	.word	0x08002588
  ldr r2, =_sbss
 8000cc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ccc:	20000078 	.word	0x20000078

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x28>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x28>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f92b 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	200f      	movs	r0, #15
 8000cec:	f000 f808 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff ff1e 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40022000 	.word	0x40022000

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x54>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f935 	bl	8000f8e <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f000 f90b 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_InitTick+0x5c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_IncTick+0x1c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_IncTick+0x20>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <HAL_IncTick+0x20>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000074 	.word	0x20000074

08000d84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <HAL_GetTick+0x10>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	20000074 	.word	0x20000074

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff fff0 	bl	8000d84 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffe0 	bl	8000d84 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ff90 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff49 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff5e 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff90 	bl	8000e98 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5f 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffb0 	bl	8000efc <SysTick_Config>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b08b      	sub	sp, #44	; 0x2c
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e169      	b.n	8001290 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 8158 	bne.w	800128a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4a9a      	ldr	r2, [pc, #616]	; (8001248 <HAL_GPIO_Init+0x2a0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d05e      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8000fe4:	4a98      	ldr	r2, [pc, #608]	; (8001248 <HAL_GPIO_Init+0x2a0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d875      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8000fea:	4a98      	ldr	r2, [pc, #608]	; (800124c <HAL_GPIO_Init+0x2a4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d058      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8000ff0:	4a96      	ldr	r2, [pc, #600]	; (800124c <HAL_GPIO_Init+0x2a4>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d86f      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8000ff6:	4a96      	ldr	r2, [pc, #600]	; (8001250 <HAL_GPIO_Init+0x2a8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d052      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8000ffc:	4a94      	ldr	r2, [pc, #592]	; (8001250 <HAL_GPIO_Init+0x2a8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d869      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8001002:	4a94      	ldr	r2, [pc, #592]	; (8001254 <HAL_GPIO_Init+0x2ac>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d04c      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8001008:	4a92      	ldr	r2, [pc, #584]	; (8001254 <HAL_GPIO_Init+0x2ac>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d863      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 800100e:	4a92      	ldr	r2, [pc, #584]	; (8001258 <HAL_GPIO_Init+0x2b0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d046      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8001014:	4a90      	ldr	r2, [pc, #576]	; (8001258 <HAL_GPIO_Init+0x2b0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d85d      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 800101a:	2b12      	cmp	r3, #18
 800101c:	d82a      	bhi.n	8001074 <HAL_GPIO_Init+0xcc>
 800101e:	2b12      	cmp	r3, #18
 8001020:	d859      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8001022:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <HAL_GPIO_Init+0x80>)
 8001024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001028:	080010a3 	.word	0x080010a3
 800102c:	0800107d 	.word	0x0800107d
 8001030:	0800108f 	.word	0x0800108f
 8001034:	080010d1 	.word	0x080010d1
 8001038:	080010d7 	.word	0x080010d7
 800103c:	080010d7 	.word	0x080010d7
 8001040:	080010d7 	.word	0x080010d7
 8001044:	080010d7 	.word	0x080010d7
 8001048:	080010d7 	.word	0x080010d7
 800104c:	080010d7 	.word	0x080010d7
 8001050:	080010d7 	.word	0x080010d7
 8001054:	080010d7 	.word	0x080010d7
 8001058:	080010d7 	.word	0x080010d7
 800105c:	080010d7 	.word	0x080010d7
 8001060:	080010d7 	.word	0x080010d7
 8001064:	080010d7 	.word	0x080010d7
 8001068:	080010d7 	.word	0x080010d7
 800106c:	08001085 	.word	0x08001085
 8001070:	08001099 	.word	0x08001099
 8001074:	4a79      	ldr	r2, [pc, #484]	; (800125c <HAL_GPIO_Init+0x2b4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800107a:	e02c      	b.n	80010d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	623b      	str	r3, [r7, #32]
          break;
 8001082:	e029      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	3304      	adds	r3, #4
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e024      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	3308      	adds	r3, #8
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e01f      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	330c      	adds	r3, #12
 800109e:	623b      	str	r3, [r7, #32]
          break;
 80010a0:	e01a      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010aa:	2304      	movs	r3, #4
 80010ac:	623b      	str	r3, [r7, #32]
          break;
 80010ae:	e013      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d105      	bne.n	80010c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b8:	2308      	movs	r3, #8
 80010ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	611a      	str	r2, [r3, #16]
          break;
 80010c2:	e009      	b.n	80010d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c4:	2308      	movs	r3, #8
 80010c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	615a      	str	r2, [r3, #20]
          break;
 80010ce:	e003      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          break;
 80010d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2bff      	cmp	r3, #255	; 0xff
 80010dc:	d801      	bhi.n	80010e2 <HAL_GPIO_Init+0x13a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	e001      	b.n	80010e6 <HAL_GPIO_Init+0x13e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3304      	adds	r3, #4
 80010e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2bff      	cmp	r3, #255	; 0xff
 80010ec:	d802      	bhi.n	80010f4 <HAL_GPIO_Init+0x14c>
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	e002      	b.n	80010fa <HAL_GPIO_Init+0x152>
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	3b08      	subs	r3, #8
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	210f      	movs	r1, #15
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	401a      	ands	r2, r3
 800110c:	6a39      	ldr	r1, [r7, #32]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	431a      	orrs	r2, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80b1 	beq.w	800128a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001128:	4b4d      	ldr	r3, [pc, #308]	; (8001260 <HAL_GPIO_Init+0x2b8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_GPIO_Init+0x2b8>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b4a      	ldr	r3, [pc, #296]	; (8001260 <HAL_GPIO_Init+0x2b8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001140:	4a48      	ldr	r2, [pc, #288]	; (8001264 <HAL_GPIO_Init+0x2bc>)
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a40      	ldr	r2, [pc, #256]	; (8001268 <HAL_GPIO_Init+0x2c0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d013      	beq.n	8001194 <HAL_GPIO_Init+0x1ec>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a3f      	ldr	r2, [pc, #252]	; (800126c <HAL_GPIO_Init+0x2c4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d00d      	beq.n	8001190 <HAL_GPIO_Init+0x1e8>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a3e      	ldr	r2, [pc, #248]	; (8001270 <HAL_GPIO_Init+0x2c8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x1e4>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a3d      	ldr	r2, [pc, #244]	; (8001274 <HAL_GPIO_Init+0x2cc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d101      	bne.n	8001188 <HAL_GPIO_Init+0x1e0>
 8001184:	2303      	movs	r3, #3
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001188:	2304      	movs	r3, #4
 800118a:	e004      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 800118c:	2302      	movs	r3, #2
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001194:	2300      	movs	r3, #0
 8001196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001198:	f002 0203 	and.w	r2, r2, #3
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	4093      	lsls	r3, r2
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011a6:	492f      	ldr	r1, [pc, #188]	; (8001264 <HAL_GPIO_Init+0x2bc>)
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	492c      	ldr	r1, [pc, #176]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4928      	ldr	r1, [pc, #160]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 80011d8:	4013      	ands	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4922      	ldr	r1, [pc, #136]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	491e      	ldr	r1, [pc, #120]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 8001200:	4013      	ands	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	4918      	ldr	r1, [pc, #96]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	608b      	str	r3, [r1, #8]
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	43db      	mvns	r3, r3
 8001226:	4914      	ldr	r1, [pc, #80]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 8001228:	4013      	ands	r3, r2
 800122a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d021      	beq.n	800127c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	490e      	ldr	r1, [pc, #56]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	60cb      	str	r3, [r1, #12]
 8001244:	e021      	b.n	800128a <HAL_GPIO_Init+0x2e2>
 8001246:	bf00      	nop
 8001248:	10320000 	.word	0x10320000
 800124c:	10310000 	.word	0x10310000
 8001250:	10220000 	.word	0x10220000
 8001254:	10210000 	.word	0x10210000
 8001258:	10120000 	.word	0x10120000
 800125c:	10110000 	.word	0x10110000
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000
 8001268:	40010800 	.word	0x40010800
 800126c:	40010c00 	.word	0x40010c00
 8001270:	40011000 	.word	0x40011000
 8001274:	40011400 	.word	0x40011400
 8001278:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_GPIO_Init+0x304>)
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	43db      	mvns	r3, r3
 8001284:	4909      	ldr	r1, [pc, #36]	; (80012ac <HAL_GPIO_Init+0x304>)
 8001286:	4013      	ands	r3, r2
 8001288:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	3301      	adds	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	fa22 f303 	lsr.w	r3, r2, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	f47f ae8e 	bne.w	8000fbc <HAL_GPIO_Init+0x14>
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	372c      	adds	r7, #44	; 0x2c
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	40010400 	.word	0x40010400

080012b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e001      	b.n	80012d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	807b      	strh	r3, [r7, #2]
 80012ea:	4613      	mov	r3, r2
 80012ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ee:	787b      	ldrb	r3, [r7, #1]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f4:	887a      	ldrh	r2, [r7, #2]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012fa:	e003      	b.n	8001304 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	041a      	lsls	r2, r3, #16
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	611a      	str	r2, [r3, #16]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
	...

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e272      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8087 	beq.w	800143e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001330:	4b92      	ldr	r3, [pc, #584]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b04      	cmp	r3, #4
 800133a:	d00c      	beq.n	8001356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133c:	4b8f      	ldr	r3, [pc, #572]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b08      	cmp	r3, #8
 8001346:	d112      	bne.n	800136e <HAL_RCC_OscConfig+0x5e>
 8001348:	4b8c      	ldr	r3, [pc, #560]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d10b      	bne.n	800136e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001356:	4b89      	ldr	r3, [pc, #548]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d06c      	beq.n	800143c <HAL_RCC_OscConfig+0x12c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d168      	bne.n	800143c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e24c      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x76>
 8001378:	4b80      	ldr	r3, [pc, #512]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a7f      	ldr	r2, [pc, #508]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800137e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e02e      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x98>
 800138e:	4b7b      	ldr	r3, [pc, #492]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a7a      	ldr	r2, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b78      	ldr	r3, [pc, #480]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a77      	ldr	r2, [pc, #476]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e01d      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0xbc>
 80013b2:	4b72      	ldr	r3, [pc, #456]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a71      	ldr	r2, [pc, #452]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b6f      	ldr	r3, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6e      	ldr	r2, [pc, #440]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 80013cc:	4b6b      	ldr	r3, [pc, #428]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a6a      	ldr	r2, [pc, #424]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b68      	ldr	r3, [pc, #416]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a67      	ldr	r2, [pc, #412]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fcca 	bl	8000d84 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fcc6 	bl	8000d84 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e200      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b5d      	ldr	r3, [pc, #372]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0xe4>
 8001412:	e014      	b.n	800143e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fcb6 	bl	8000d84 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fcb2 	bl	8000d84 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1ec      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x10c>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d063      	beq.n	8001512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144a:	4b4c      	ldr	r3, [pc, #304]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001456:	4b49      	ldr	r3, [pc, #292]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b08      	cmp	r3, #8
 8001460:	d11c      	bne.n	800149c <HAL_RCC_OscConfig+0x18c>
 8001462:	4b46      	ldr	r3, [pc, #280]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d116      	bne.n	800149c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	4b43      	ldr	r3, [pc, #268]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_OscConfig+0x176>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e1c0      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4939      	ldr	r1, [pc, #228]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	e03a      	b.n	8001512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fc6b 	bl	8000d84 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fc67 	bl	8000d84 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1a1      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4927      	ldr	r1, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc4a 	bl	8000d84 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fc46 	bl	8000d84 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e180      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d03a      	beq.n	8001594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d019      	beq.n	800155a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_RCC_OscConfig+0x274>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152c:	f7ff fc2a 	bl	8000d84 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fc26 	bl	8000d84 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e160      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001552:	2001      	movs	r0, #1
 8001554:	f000 faa6 	bl	8001aa4 <RCC_Delay>
 8001558:	e01c      	b.n	8001594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_RCC_OscConfig+0x274>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fc10 	bl	8000d84 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001566:	e00f      	b.n	8001588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fc0c 	bl	8000d84 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d908      	bls.n	8001588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e146      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	42420000 	.word	0x42420000
 8001584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	4b92      	ldr	r3, [pc, #584]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1e9      	bne.n	8001568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a6 	beq.w	80016ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4b8b      	ldr	r3, [pc, #556]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10d      	bne.n	80015ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a87      	ldr	r2, [pc, #540]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b85      	ldr	r3, [pc, #532]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ca:	2301      	movs	r3, #1
 80015cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ce:	4b82      	ldr	r3, [pc, #520]	; (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d118      	bne.n	800160c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	4b7f      	ldr	r3, [pc, #508]	; (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a7e      	ldr	r2, [pc, #504]	; (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fbcd 	bl	8000d84 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ee:	f7ff fbc9 	bl	8000d84 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b64      	cmp	r3, #100	; 0x64
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e103      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	4b75      	ldr	r3, [pc, #468]	; (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x312>
 8001614:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a6e      	ldr	r2, [pc, #440]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	e02d      	b.n	800167e <HAL_RCC_OscConfig+0x36e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x334>
 800162a:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a69      	ldr	r2, [pc, #420]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a66      	ldr	r2, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	e01c      	b.n	800167e <HAL_RCC_OscConfig+0x36e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b05      	cmp	r3, #5
 800164a:	d10c      	bne.n	8001666 <HAL_RCC_OscConfig+0x356>
 800164c:	4b61      	ldr	r3, [pc, #388]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a60      	ldr	r2, [pc, #384]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a5d      	ldr	r2, [pc, #372]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e00b      	b.n	800167e <HAL_RCC_OscConfig+0x36e>
 8001666:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a5a      	ldr	r2, [pc, #360]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6213      	str	r3, [r2, #32]
 8001672:	4b58      	ldr	r3, [pc, #352]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a57      	ldr	r2, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d015      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fb7d 	bl	8000d84 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff fb79 	bl	8000d84 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0b1      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0ee      	beq.n	800168e <HAL_RCC_OscConfig+0x37e>
 80016b0:	e014      	b.n	80016dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b2:	f7ff fb67 	bl	8000d84 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff fb63 	bl	8000d84 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e09b      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ee      	bne.n	80016ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d105      	bne.n	80016ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e2:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a3b      	ldr	r2, [pc, #236]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8087 	beq.w	8001806 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b08      	cmp	r3, #8
 8001702:	d061      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d146      	bne.n	800179a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170c:	4b33      	ldr	r3, [pc, #204]	; (80017dc <HAL_RCC_OscConfig+0x4cc>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff fb37 	bl	8000d84 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff fb33 	bl	8000d84 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e06d      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d108      	bne.n	8001754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4921      	ldr	r1, [pc, #132]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a19      	ldr	r1, [r3, #32]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	430b      	orrs	r3, r1
 8001766:	491b      	ldr	r1, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x4cc>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fb07 	bl	8000d84 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fb03 	bl	8000d84 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e03d      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x46a>
 8001798:	e035      	b.n	8001806 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_RCC_OscConfig+0x4cc>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff faf0 	bl	8000d84 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff faec 	bl	8000d84 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e026      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x498>
 80017c6:	e01e      	b.n	8001806 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e019      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40007000 	.word	0x40007000
 80017dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_OscConfig+0x500>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0d0      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d910      	bls.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0207 	bic.w	r2, r3, #7
 800183e:	4965      	ldr	r1, [pc, #404]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b8      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800187a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001892:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	494d      	ldr	r1, [pc, #308]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d040      	beq.n	8001934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d115      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e073      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06b      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f023 0203 	bic.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4936      	ldr	r1, [pc, #216]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001904:	f7ff fa3e 	bl	8000d84 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff fa3a 	bl	8000d84 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e053      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 020c 	and.w	r2, r3, #12
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	429a      	cmp	r2, r3
 8001932:	d1eb      	bne.n	800190c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d210      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 0207 	bic.w	r2, r3, #7
 800194a:	4922      	ldr	r1, [pc, #136]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e032      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4916      	ldr	r1, [pc, #88]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019a2:	f000 f821 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	490a      	ldr	r1, [pc, #40]	; (80019dc <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	5ccb      	ldrb	r3, [r1, r3]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1cc>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1d0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f99c 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08002570 	.word	0x08002570
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	b490      	push	{r4, r7}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xac>)
 80019f0:	1d3c      	adds	r4, r7, #4
 80019f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019f8:	f240 2301 	movw	r3, #513	; 0x201
 80019fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x40>
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x46>
 8001a26:	e02b      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a2a:	623b      	str	r3, [r7, #32]
      break;
 8001a2c:	e02b      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	0c9b      	lsrs	r3, r3, #18
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3328      	adds	r3, #40	; 0x28
 8001a38:	443b      	add	r3, r7
 8001a3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d012      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0c5b      	lsrs	r3, r3, #17
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	3328      	adds	r3, #40	; 0x28
 8001a56:	443b      	add	r3, r7
 8001a58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a62:	fb03 f202 	mul.w	r2, r3, r2
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	e004      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	623b      	str	r3, [r7, #32]
      break;
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a82:	623b      	str	r3, [r7, #32]
      break;
 8001a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a86:	6a3b      	ldr	r3, [r7, #32]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc90      	pop	{r4, r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	08002560 	.word	0x08002560
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	007a1200 	.word	0x007a1200
 8001aa0:	003d0900 	.word	0x003d0900

08001aa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <RCC_Delay+0x34>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <RCC_Delay+0x38>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0a5b      	lsrs	r3, r3, #9
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ac0:	bf00      	nop
  }
  while (Delay --);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1e5a      	subs	r2, r3, #1
 8001ac6:	60fa      	str	r2, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f9      	bne.n	8001ac0 <RCC_Delay+0x1c>
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	10624dd3 	.word	0x10624dd3

08001ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e041      	b.n	8001b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff f844 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f000 fa08 	bl	8001f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e041      	b.n	8001c14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f839 	bl	8001c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	f000 f9b9 	bl	8001f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e0ac      	b.n	8001da4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	f200 809f 	bhi.w	8001d98 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001c5a:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001c95 	.word	0x08001c95
 8001c64:	08001d99 	.word	0x08001d99
 8001c68:	08001d99 	.word	0x08001d99
 8001c6c:	08001d99 	.word	0x08001d99
 8001c70:	08001cd5 	.word	0x08001cd5
 8001c74:	08001d99 	.word	0x08001d99
 8001c78:	08001d99 	.word	0x08001d99
 8001c7c:	08001d99 	.word	0x08001d99
 8001c80:	08001d17 	.word	0x08001d17
 8001c84:	08001d99 	.word	0x08001d99
 8001c88:	08001d99 	.word	0x08001d99
 8001c8c:	08001d99 	.word	0x08001d99
 8001c90:	08001d57 	.word	0x08001d57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f9ac 	bl	8001ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0208 	orr.w	r2, r2, #8
 8001cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0204 	bic.w	r2, r2, #4
 8001cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6999      	ldr	r1, [r3, #24]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	619a      	str	r2, [r3, #24]
      break;
 8001cd2:	e062      	b.n	8001d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f9f2 	bl	80020c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6999      	ldr	r1, [r3, #24]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	021a      	lsls	r2, r3, #8
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	619a      	str	r2, [r3, #24]
      break;
 8001d14:	e041      	b.n	8001d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fa3b 	bl	8002198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	69da      	ldr	r2, [r3, #28]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0208 	orr.w	r2, r2, #8
 8001d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69da      	ldr	r2, [r3, #28]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0204 	bic.w	r2, r2, #4
 8001d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69d9      	ldr	r1, [r3, #28]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	61da      	str	r2, [r3, #28]
      break;
 8001d54:	e021      	b.n	8001d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fa85 	bl	800226c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69da      	ldr	r2, [r3, #28]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69d9      	ldr	r1, [r3, #28]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	021a      	lsls	r2, r3, #8
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	61da      	str	r2, [r3, #28]
      break;
 8001d96:	e000      	b.n	8001d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_TIM_ConfigClockSource+0x18>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e0b3      	b.n	8001f2c <HAL_TIM_ConfigClockSource+0x180>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dfc:	d03e      	beq.n	8001e7c <HAL_TIM_ConfigClockSource+0xd0>
 8001dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e02:	f200 8087 	bhi.w	8001f14 <HAL_TIM_ConfigClockSource+0x168>
 8001e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0a:	f000 8085 	beq.w	8001f18 <HAL_TIM_ConfigClockSource+0x16c>
 8001e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e12:	d87f      	bhi.n	8001f14 <HAL_TIM_ConfigClockSource+0x168>
 8001e14:	2b70      	cmp	r3, #112	; 0x70
 8001e16:	d01a      	beq.n	8001e4e <HAL_TIM_ConfigClockSource+0xa2>
 8001e18:	2b70      	cmp	r3, #112	; 0x70
 8001e1a:	d87b      	bhi.n	8001f14 <HAL_TIM_ConfigClockSource+0x168>
 8001e1c:	2b60      	cmp	r3, #96	; 0x60
 8001e1e:	d050      	beq.n	8001ec2 <HAL_TIM_ConfigClockSource+0x116>
 8001e20:	2b60      	cmp	r3, #96	; 0x60
 8001e22:	d877      	bhi.n	8001f14 <HAL_TIM_ConfigClockSource+0x168>
 8001e24:	2b50      	cmp	r3, #80	; 0x50
 8001e26:	d03c      	beq.n	8001ea2 <HAL_TIM_ConfigClockSource+0xf6>
 8001e28:	2b50      	cmp	r3, #80	; 0x50
 8001e2a:	d873      	bhi.n	8001f14 <HAL_TIM_ConfigClockSource+0x168>
 8001e2c:	2b40      	cmp	r3, #64	; 0x40
 8001e2e:	d058      	beq.n	8001ee2 <HAL_TIM_ConfigClockSource+0x136>
 8001e30:	2b40      	cmp	r3, #64	; 0x40
 8001e32:	d86f      	bhi.n	8001f14 <HAL_TIM_ConfigClockSource+0x168>
 8001e34:	2b30      	cmp	r3, #48	; 0x30
 8001e36:	d064      	beq.n	8001f02 <HAL_TIM_ConfigClockSource+0x156>
 8001e38:	2b30      	cmp	r3, #48	; 0x30
 8001e3a:	d86b      	bhi.n	8001f14 <HAL_TIM_ConfigClockSource+0x168>
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d060      	beq.n	8001f02 <HAL_TIM_ConfigClockSource+0x156>
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	d867      	bhi.n	8001f14 <HAL_TIM_ConfigClockSource+0x168>
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d05c      	beq.n	8001f02 <HAL_TIM_ConfigClockSource+0x156>
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d05a      	beq.n	8001f02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e4c:	e062      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f000 faca 	bl	80023f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	609a      	str	r2, [r3, #8]
      break;
 8001e7a:	e04e      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f000 fab3 	bl	80023f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e9e:	609a      	str	r2, [r3, #8]
      break;
 8001ea0:	e03b      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6859      	ldr	r1, [r3, #4]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f000 fa2a 	bl	8002308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2150      	movs	r1, #80	; 0x50
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fa81 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 8001ec0:	e02b      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6859      	ldr	r1, [r3, #4]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f000 fa48 	bl	8002364 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2160      	movs	r1, #96	; 0x60
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fa71 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 8001ee0:	e01b      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f000 fa0a 	bl	8002308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2140      	movs	r1, #64	; 0x40
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fa61 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 8001f00:	e00b      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	f000 fa58 	bl	80023c2 <TIM_ITRx_SetConfig>
        break;
 8001f12:	e002      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f14:	bf00      	nop
 8001f16:	e000      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a29      	ldr	r2, [pc, #164]	; (8001fec <TIM_Base_SetConfig+0xb8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00b      	beq.n	8001f64 <TIM_Base_SetConfig+0x30>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f52:	d007      	beq.n	8001f64 <TIM_Base_SetConfig+0x30>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <TIM_Base_SetConfig+0xbc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0x30>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <TIM_Base_SetConfig+0xc0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d108      	bne.n	8001f76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <TIM_Base_SetConfig+0xb8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00b      	beq.n	8001f96 <TIM_Base_SetConfig+0x62>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f84:	d007      	beq.n	8001f96 <TIM_Base_SetConfig+0x62>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <TIM_Base_SetConfig+0xbc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d003      	beq.n	8001f96 <TIM_Base_SetConfig+0x62>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <TIM_Base_SetConfig+0xc0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d108      	bne.n	8001fa8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <TIM_Base_SetConfig+0xb8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d103      	bne.n	8001fdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	615a      	str	r2, [r3, #20]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800

08001ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f023 0201 	bic.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f023 0302 	bic.w	r3, r3, #2
 8002040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <TIM_OC1_SetConfig+0xc8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10c      	bne.n	800206e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f023 0308 	bic.w	r3, r3, #8
 800205a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4313      	orrs	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <TIM_OC1_SetConfig+0xc8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d111      	bne.n	800209a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800207c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	621a      	str	r2, [r3, #32]
}
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40012c00 	.word	0x40012c00

080020c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f023 0210 	bic.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f023 0320 	bic.w	r3, r3, #32
 800210e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <TIM_OC2_SetConfig+0xd0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d10d      	bne.n	8002140 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800212a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800213e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a14      	ldr	r2, [pc, #80]	; (8002194 <TIM_OC2_SetConfig+0xd0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d113      	bne.n	8002170 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800214e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	621a      	str	r2, [r3, #32]
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	40012c00 	.word	0x40012c00

08002198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <TIM_OC3_SetConfig+0xd0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10d      	bne.n	8002212 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <TIM_OC3_SetConfig+0xd0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d113      	bne.n	8002242 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	621a      	str	r2, [r3, #32]
}
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40012c00 	.word	0x40012c00

0800226c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800229a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	031b      	lsls	r3, r3, #12
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <TIM_OC4_SetConfig+0x98>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d109      	bne.n	80022e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	621a      	str	r2, [r3, #32]
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40012c00 	.word	0x40012c00

08002308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	f023 0201 	bic.w	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f023 030a 	bic.w	r3, r3, #10
 8002344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	621a      	str	r2, [r3, #32]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f023 0210 	bic.w	r2, r3, #16
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800238e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	031b      	lsls	r3, r3, #12
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	621a      	str	r2, [r3, #32]
}
 80023b8:	bf00      	nop
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	f043 0307 	orr.w	r3, r3, #7
 80023e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	609a      	str	r2, [r3, #8]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b087      	sub	sp, #28
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002410:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	021a      	lsls	r2, r3, #8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	431a      	orrs	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4313      	orrs	r3, r2
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	609a      	str	r2, [r3, #8]
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002448:	2302      	movs	r3, #2
 800244a:	e046      	b.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a16      	ldr	r2, [pc, #88]	; (80024e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00e      	beq.n	80024ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002498:	d009      	beq.n	80024ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d004      	beq.n	80024ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d10c      	bne.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40000800 	.word	0x40000800

080024f0 <__libc_init_array>:
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	2600      	movs	r6, #0
 80024f4:	4d0c      	ldr	r5, [pc, #48]	; (8002528 <__libc_init_array+0x38>)
 80024f6:	4c0d      	ldr	r4, [pc, #52]	; (800252c <__libc_init_array+0x3c>)
 80024f8:	1b64      	subs	r4, r4, r5
 80024fa:	10a4      	asrs	r4, r4, #2
 80024fc:	42a6      	cmp	r6, r4
 80024fe:	d109      	bne.n	8002514 <__libc_init_array+0x24>
 8002500:	f000 f822 	bl	8002548 <_init>
 8002504:	2600      	movs	r6, #0
 8002506:	4d0a      	ldr	r5, [pc, #40]	; (8002530 <__libc_init_array+0x40>)
 8002508:	4c0a      	ldr	r4, [pc, #40]	; (8002534 <__libc_init_array+0x44>)
 800250a:	1b64      	subs	r4, r4, r5
 800250c:	10a4      	asrs	r4, r4, #2
 800250e:	42a6      	cmp	r6, r4
 8002510:	d105      	bne.n	800251e <__libc_init_array+0x2e>
 8002512:	bd70      	pop	{r4, r5, r6, pc}
 8002514:	f855 3b04 	ldr.w	r3, [r5], #4
 8002518:	4798      	blx	r3
 800251a:	3601      	adds	r6, #1
 800251c:	e7ee      	b.n	80024fc <__libc_init_array+0xc>
 800251e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002522:	4798      	blx	r3
 8002524:	3601      	adds	r6, #1
 8002526:	e7f2      	b.n	800250e <__libc_init_array+0x1e>
 8002528:	08002580 	.word	0x08002580
 800252c:	08002580 	.word	0x08002580
 8002530:	08002580 	.word	0x08002580
 8002534:	08002584 	.word	0x08002584

08002538 <memset>:
 8002538:	4603      	mov	r3, r0
 800253a:	4402      	add	r2, r0
 800253c:	4293      	cmp	r3, r2
 800253e:	d100      	bne.n	8002542 <memset+0xa>
 8002540:	4770      	bx	lr
 8002542:	f803 1b01 	strb.w	r1, [r3], #1
 8002546:	e7f9      	b.n	800253c <memset+0x4>

08002548 <_init>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	bf00      	nop
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr

08002554 <_fini>:
 8002554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002556:	bf00      	nop
 8002558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255a:	bc08      	pop	{r3}
 800255c:	469e      	mov	lr, r3
 800255e:	4770      	bx	lr
